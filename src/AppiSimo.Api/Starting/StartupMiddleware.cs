using Microsoft.AspNet.OData.Formatter.Deserialization;

namespace AppiSimo.Api.Starting
{
    using System.Net.Http.Headers;
    using System.Reflection;
    using Microsoft.AspNet.OData.Builder;
    using Microsoft.AspNet.OData.Extensions;
    using Microsoft.AspNet.OData.Formatter;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.OData.Edm;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Serialization;
    using Shared.Model;


    public static class StartupMiddleware
    {
        public static void UseDeveloperEnvironment(this IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }
        }

        public static void UseRoutesMap(this IApplicationBuilder app)
        {
            app.UseCors(builder => builder.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());
            
            app.UseMvc(options =>
            {
                options.Select().Expand().Filter().OrderBy().MaxTop(maxTopValue: 100).Count();
                options.EnableDependencyInjection();
                options.MapODataServiceRoute("odata", "api", GetEdmModel());
            });

            app.Map("/api", api =>
            {
                api.UseMvc(b =>
                {
                    b.MapRoute("default", "{controller}/{action}");
                });
            });
        }

        static IEdmModel GetEdmModel()
        {
            var builder = new ODataConventionModelBuilder();

            builder.EnableLowerCamelCase();
            
            // Change name of json properties generated by odata with the name of JsonProperty attribute.
            builder.OnModelCreating += model =>
            {
                foreach (var type in model.StructuralTypes)
                {
                    foreach (var property in type.Properties)
                    {
                        property.Name = property.PropertyInfo.GetCustomAttribute<JsonPropertyAttribute>()?.PropertyName ?? property.Name;
                    }    
                }
            };
                
            builder.EntitySet<User>("Users");
            builder.EntitySet<Event>("Events");
            builder.EntitySet<Court>("Courts");
            builder.EntitySet<Light>("Lights");
            builder.EntitySet<Heat>("Heats");
            builder.EntitySet<Rate>("Rates");
            builder.EntitySet<UserEvent>("UserEvent");
            
            
       

            return builder.GetEdmModel();
        }
    }
}