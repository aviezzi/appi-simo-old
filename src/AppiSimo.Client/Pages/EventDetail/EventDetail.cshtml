@page "/event"
@page "/event/{Id}"

@inherits EventDetailComponent

<form>

    <div class="form-group">
        <div class="input-group mt-3 mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Utenti</span>
            </div>
            <input class="form-control" bind="@Filter" placeholder="Cerca..."/>
        </div>
        <ul class="overflow-auto list-group list-group-flush" style="max-height: 200px">

            @foreach (var userEvent in ViewModel.FilteredUserEvents.Where(userEvent => userEvent.User.Name.ToUpper().Contains(Filter.Trim().ToUpper())).OrderBy(u => u.User.Name))
            {
                <li class="list-group-item user-add-li" onclick="@(() => AddUser(userEvent))">
                    <span>@userEvent.User.Name @userEvent.User.Surname</span><span class="oi oi-plus float-right" data-toggle="tooltip" aria-hidden="true"></span>
                </li>
            }

        </ul>
    </div>

    <div class="form-group">
        <label for="startDate" class="control-label">Selected User</label>
        <ul class="list-group list-group-flush">

            @foreach (var userEvent in ViewModel.SelectedUserEvents.OrderBy(ue => ue.User.Name))
            {
                <li class="list-group-item user-remove-li">
                    <div class="container">
                        <div class="row align-middle align-items-center">
                            <div class="col-1" onclick="@(() => ViewModel.SwitchPayment(userEvent.UserId))">
                                <input type="checkbox" class="form-check-input" bind="@userEvent.Paid"/>
                            </div>
                            <div class="col-6" onclick="@(() => RemoveUser(userEvent))">
                                <span>@userEvent.User.Name @userEvent.User.Surname</span>
                            </div>
                            <div class="col-4">
                                <div class="input-group">
                                    <input class="form-control" bind="@userEvent.FormattedCost"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text">&euro;</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-1" onclick="@(() => RemoveUser(userEvent))">
                                <span class="oi oi-minus" data-toggle="tooltip" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                </li>
            }

        </ul>
    </div>

    <div class="form-group">
        <label for="startDate" class="control-label">StartDate</label>
        <input id="startDate" class="form-control" bind="@ViewModel.SelectedStartDate" placeholder="gg/mm/aaaa hh:mm"/>
        <ul>
            @if (!ViewModel.IsValidStarDate)
            {
                <li class="text-danger">Il formato della data non &egrave; corretto</li>
            }
            else if (ViewModel.State.Properties.ContainsKey("StartDate"))
            {
                foreach (var error in ViewModel.State.Properties["StartDate"].Errors)
                {
                    <li class="text-danger">@error</li>
                }
            }
        </ul>
    </div>

    <div class="form-group">
        <label for="endDate" class="control-label">EndDate</label>
        <input id="endDate" class="form-control" bind="@ViewModel.SelectedEndDate" placeholder="gg/mm/aaaa hh:mm"/>
        <ul>
            @if (!ViewModel.IsValidEndDate)
            {
                <li class="text-danger">Il formato della data non &egrave; corretto</li>
            }
            else if (ViewModel.State.Properties.ContainsKey("EndDate"))
            {
                foreach (var error in ViewModel.State.Properties["EndDate"].Errors)
                {
                    <li class="text-danger">@error</li>
                }
            }
        </ul>
    </div>

    <div class="form-group">
        <label for="courtsSelect">Campo</label>
        <select class="form-control" id="courtsSelect" bind="@ViewModel.SelectedCourt">

            @* TODO: ISSUE https://github.com/aspnet/AspNetCore/issues/5616*@
            @foreach (var court in ViewModel.Courts.OrderBy(c => c.Name))
            {
                if (ViewModel.SelectedCourt == court.Id.ToString())
                {
                    <option selected value="@court.Id">@court.Name</option>

                    continue;
                }

                <option value="@court.Id">@court.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="lightsSelect">Luce</label>
        <select class="form-control" id="lightsSelect" bind="@ViewModel.SelectedLight">

            <option value="">No Luce</option>

            @if (ViewModel.SelectedLight != null)
            {
                <option selected value="@ViewModel.SelectedCourtLight.Id">@ViewModel.SelectedCourtLight.LightType</option>
            }
            else
            {
                <option value="@ViewModel.SelectedCourtLight.Id">@ViewModel.SelectedCourtLight.LightType</option>
            }

        </select>
    </div>

    @if (ViewModel.SelectedLight != null)
    {
        <div class="form-group">
            <label for="lightDuration" class="control-label">Durata Luce</label>
            <input id="lightDuration" class="form-control" bind="@ViewModel.SelectedLightDuration"/>
        </div>
    }

    <div class="form-group">
        <label for="heatsSelect">Riscaldamento</label>
        <select class="form-control" id="heatsSelect" bind="@ViewModel.SelectedHeat">

            <option value="">No Riscaldamento</option>

            @if (ViewModel.SelectedHeat != null)
            {
                <option selected value="@ViewModel.SelectedCourtHeat.Id">@ViewModel.SelectedCourtHeat.HeatType</option>
            }
            else
            {
                <option value="@ViewModel.SelectedCourtHeat.Id">@ViewModel.SelectedCourtHeat.HeatType</option>
            }

        </select>
    </div>

    @if (ViewModel.SelectedHeat != null)
    {
        <div class="form-group">
            <label for="heatDuration" class="control-label">Durata Riscaldamento</label>
            <input id="heatDuration" class="form-control" bind="@ViewModel.SelectedHeatDuration"/>
        </div>
    }

    <div class="form-group">
        <button type="button" class="btn btn-block btn-outline-success" onclick="@(async () => await Save())">Salva</button>
        <button type="button" class="btn btn-block btn-outline-danger" style="display: @(ViewModel.IsNewEntity() ? "none" : "inline-block;");" onclick="@(async () => await Delete())">Cancella</button>
    </div>
</form>