@page "/event"
@page "/event/{Id}"

@inherits EventDetailComponent

<div class="d-flex mt-4">
    <h1 class="my-0">@(Entity.Id == Guid.Empty ? "Nuova Prenotazione" : "Modifca Prenotazione")</h1>
</div>

<form class="mt-4 mb-5">

<div class="form-group alert alert-secondary">
    <label class="control-label font-weight-bold">Utenti Selezionabili</label>

    <div class="input-group mt-3 mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text appisimo-prepend">Utenti</span>
        </div>
        <input class="form-control" bind="@Filter" placeholder="Cerca..."/>
    </div>

    <ul class="overflow-auto list-group list-group-flush" style="max-height: 300px">

        @foreach (var userEvent in ViewModel.FilteredUserEvents.Where(userEvent => userEvent.User.Profile.GivenName.ToUpper().Contains(Filter.Trim().ToUpper())).OrderBy(u => u.User.Profile.FamilyName))
        {
            <li class="list-group-item user-add-li" onclick="@(() => AddUser(userEvent))">
                <span class="font-weight-bold text-secondary">@userEvent.User.Profile.GivenName @userEvent.User.Profile.FamilyName</span><span class="oi oi-plus float-right" data-toggle="tooltip" aria-hidden="true"></span>
            </li>
        }

    </ul>
</div>

<div class="card">
    <div class="card-body">

        <div class="form-group mb-0">
            <label class="control-label font-weight-bold">Utenti Selezionati</label>
            <ul class="list-group list-group-flush">

                @if (ViewModel.SelectedUserEvents.Count == 0)
                {
                    <li class="list-group-item">
                        <div class="font-weight-bold text-secondary">Nessun utente selezionato</div>
                    </li>
                }

                @foreach (var userEvent in ViewModel.SelectedUserEvents.OrderBy(ue => ue.User.Profile.GivenName))
                {
                    <li class="list-group-item user-remove-li">
                        <div class="container-fluid">
                            <div class="row align-items-center">
                                <div class="col-7 p-0" onclick="@(() => ViewModel.SwitchPayment(userEvent.UserId))">
                                    <span onclick="@(() => RemoveUser(userEvent))">
                                        <span class="font-weight-bold text-secondary">@userEvent.User.Profile.GivenName&nbsp;@userEvent.User.Profile.GivenName</span>
                                    </span>
                                </div>

                                <div class="col-4">
                                    <div class="input-group">
                                        <div class="input-group-prepend" data-toggle="tooltip" data-placement="top" title="Spunta per marcare come pagato">
                                            <div class="input-group-text">
                                                <input type="checkbox" bind="@userEvent.Paid"/>
                                            </div>
                                        </div>

                                        <input class="form-control" bind="@userEvent.FormattedCost"/>

                                        <div class="input-group-append">
                                            <span class="input-group-text">&euro;</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-1 text-right p-0" onclick="@(() => RemoveUser(userEvent))">
                                    <span class="oi oi-minus" data-toggle="tooltip" aria-hidden="true"></span>
                                </div>
                            </div>
                        </div>
                    </li>
                }
                <li class="list-group-item p-0"></li>
            </ul>
        </div>

        <div class="input-group my-4">
            <div class="input-group-prepend">
                <div class="input-group-text appisimo-prepend">Data Inizio</div>
            </div>
            <input class="form-control text-secondary" placeholder="gg/mm/aaaa hh:mm" bind="@ViewModel.SelectedStartDate"/>
        </div>

        <ul class="my-0">
            @if (!ViewModel.IsValidStarDate)
            {
                <li class="text-danger">Il formato della data non &egrave; corretto</li>
            }
            else if (ViewModel.State.Properties.ContainsKey("StartDate"))
            {
                foreach (var error in ViewModel.State.Properties["StartDate"].Errors)
                {
                    <li class="text-danger">@error</li>
                }
            }
        </ul>

        <div class="input-group my-4">
            <div class="input-group-prepend">
                <div class="input-group-text appisimo-prepend">Data Fine</div>
            </div>
            <input class="form-control text-secondary" placeholder="gg/mm/aaaa hh:mm" bind="@ViewModel.SelectedEndDate"/>
        </div>

        <ul class="my-0">
            @if (!ViewModel.IsValidEndDate)
            {
                <li class="text-danger">Il formato della data non &egrave; corretto</li>
            }
            else if (ViewModel.State.Properties.ContainsKey("EndDate"))
            {
                foreach (var error in ViewModel.State.Properties["EndDate"].Errors)
                {
                    <li class="text-danger">@error</li>
                }
            }
        </ul>

        <div class="input-group my-4">
            <div class="input-group-prepend">
                <div class="input-group-text appisimo-prepend">Campo</div>
            </div>
            <select class="form-control" id="event-detail-court" bind="@ViewModel.SelectedCourt">

                @* BUG: ISSUE https://github.com/aspnet/AspNetCore/issues/5616*@
                @foreach (var court in ViewModel.Courts.OrderBy(c => c.Name))
                {
                    if (ViewModel.SelectedCourt == court.Id.ToString())
                    {
                        <option selected value="@court.Id">@court.Name</option>

                        continue;
                    }

                    <option value="@court.Id">@court.Name</option>
                }
            </select>
        </div>

        <div class="input-group my-4">
            <div class="input-group-prepend">
                <div class="input-group-text appisimo-prepend">Luce</div>
            </div>
            <select class="form-control" id="event-detail-light" bind="@ViewModel.SelectedLight">

                <option value="">No Luce</option>

                @if (ViewModel.SelectedLight != null)
                {
                    <option selected value="@ViewModel.SelectedCourtLight.Id">@ViewModel.SelectedCourtLight.LightType</option>
                }
                else
                {
                    <option value="@ViewModel.SelectedCourtLight.Id">@ViewModel.SelectedCourtLight.LightType</option>
                }

            </select>
        </div>

        @if (ViewModel.SelectedLight != null)
        {
            <div class="input-group my-4">
                <div class="input-group-prepend">
                    <div class="input-group-text appisimo-prepend">Durata Luce</div>
                </div>
                <input class="form-control text-secondary" placeholder="Durata Luce" bind="@ViewModel.SelectedLightDuration"/>
            </div>
        }

        <div class="input-group my-4">
            <div class="input-group-prepend">
                <div class="input-group-text appisimo-prepend">Riscaldamento</div>
            </div>
            <select class="form-control" id="event-detail-heat" bind="@ViewModel.SelectedHeat">

                <option value="">No Riscaldamento</option>

                @if (ViewModel.SelectedHeat != null)
                {
                    <option selected value="@ViewModel.SelectedCourtHeat.Id">@ViewModel.SelectedCourtHeat.HeatType</option>
                }
                else
                {
                    <option value="@ViewModel.SelectedCourtHeat.Id">@ViewModel.SelectedCourtHeat.HeatType</option>
                }

            </select>
        </div>

        @if (ViewModel.SelectedHeat != null)
        {
            <div class="input-group my-4">
                <div class="input-group-prepend">
                    <div class="input-group-text appisimo-prepend">Durata Riscal.</div>
                </div>
                <input class="form-control text-secondary" placeholder="Durata Riscalamento" bind="@ViewModel.SelectedHeatDuration"/>
            </div>
        }

        <div class="input-group d-flex">
            <button type="button" class="btn btn-outline-success mr-2 flex-equal" onclick="@(async () => await Save())">Salva</button>
            <button type="button" class="btn btn-outline-danger ml-2 flex-equal" style="display: @(ViewModel.IsNewEntity() ? "none" : "inline-block;");" onclick="@(async () => await Delete())">Cancella</button>
        </div>

    </div>
</div>
</form>